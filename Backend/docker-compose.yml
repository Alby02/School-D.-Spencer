
services:
    pgadmin: # pgAdmin4 for testing purposes only (not for production)
        image: dpage/pgadmin4
        container_name: pgadmin
        environment:
            - PGADMIN_DEFAULT_EMAIL=a@a.a
            - PGADMIN_DEFAULT_PASSWORD=a
        ports:
            - "5050:80"
        networks:
            - postgres-api-network

    node-website:
        container_name: node-website
        image: website:latest
        ports:
            - "443:3000"
        volumes:
            - ./certs/web-https/web-https.key:/certs/https.key
            - ./certs/web-https/web-https.crt:/certs/https.crt
        depends_on:
            - java-api
            - keycloak

    mosquitto-backend:
        image: eclipse-mosquitto:latest
        container_name: mosquitto-backend
        ports:
            - "8883:8883"
        volumes:
            - ./mosquitto/data:/mosquitto/data
            - ./mosquitto/log:/mosquitto/log
            - ./mosquitto/conf:/mosquitto/config
            - ./certs/broker-mqtt/broker-mqtt.crt:/certs/server.crt
            - ./certs/broker-mqtt/broker-mqtt.key:/certs/server.key
            - ./certs/ca.crt:/certs/ca.crt

    postgres-api:
        image: postgres:latest
        container_name: postgres-api
        environment:
            - POSTGRES_DB=${POSTGRES_DB_API}
            - POSTGRES_USER=${POSTGRES_USER_API}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_API} #/run/secrets/postgres_password
        volumes:
            - ./postgres/api/data:/var/lib/postgresql/data
        expose:
            - "5432"
        networks:
            - postgres-api-network
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U user" ]
            interval: 5s
            timeout: 3s
            retries: 5

    java-api:
        container_name: api-service
        image: api-service:latest
        environment:
            - POSTGRES_URL=${POSTGRES_URL_API}
            - POSTGRES_DATABASE=${POSTGRES_DB_API}
            - POSTGRES_USER=${POSTGRES_USER_API}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_API}
            - MQTT_URL=${MQTT_URL}
        ports:
            - "8443:443"
        volumes:
            - ./certs/api-https/api-https.p12:/app/certs/https.p12
            - ./certs/api-mqtt/api-mqtt.p12:/app/certs/mqtt.p12
            - ./certs/ca.crt:/app/certs/ca.crt
            - ./certs/ca.p12:/app/certs/ca.p12
        networks:
            - postgres-api-network
        depends_on:
            postgres-api:
                condition: service_healthy
            mosquitto-backend:
                condition: service_started

    postgres-keycloak:
        image: postgres:latest
        container_name: postgres-keycloak
        environment:
            - POSTGRES_DB=${KC_DB_URL_DATABASE}
            - POSTGRES_USER=${KC_DB_USERNAME}
            - POSTGRES_PASSWORD=${KC_DB_PASSWORD}
        volumes:
            - ./postgres/keycloak/data:/var/lib/postgresql/data
        expose:
            - "5432"  # Expose to services inside the network
        networks:
            - keycloak-postgres-network  # Connect PostgreSQL to Keycloak
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U user" ]
            interval: 5s
            timeout: 3s
            retries: 5

    keycloak:
        image: keycloak/keycloak:latest
        container_name: keycloak
        environment:
            - KC_DB=${KC_DB}
            - KC_DB_URL_HOST=${KC_DB_URL_HOST}
            - KC_DB_URL_DATABASE=${KC_DB_URL_DATABASE}
            - KC_DB_USERNAME=${KC_DB_USERNAME}
            - KC_DB_PASSWORD=${KC_DB_PASSWORD}
            - KEYCLOAK_ADMIN=${KC_ADMIN}
            - KEYCLOAK_ADMIN_PASSWORD=${KC_ADMIN_PASSWORD}
        ports:
            - "8080:8080"
        networks:
            - keycloak-postgres-network  # Network between Keycloak and PostgreSQL
        depends_on:
            postgres-keycloak:
                condition: service_healthy
        command: start-dev


networks:
    postgres-api-network:
        driver: bridge
    keycloak-postgres-network:
        driver: bridge  # Network for Keycloak and PostgreSQL